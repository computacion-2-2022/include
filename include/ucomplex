#include <complex>

namespace std {
    template <class T> class ucomplex : public complex<T> {
        public:
            ucomplex(const T& __re = 0, const T& __im = 0) {
                this->real(__re);
                this->imag(__im);
            }

            ucomplex(const ucomplex<T>& __c) {
                this->real(__c.real());
                this->imag(__c.imag());
            }

            ucomplex<T> operator*(int a) {
                ucomplex<T> ret(this->real() * a, this->imag() * a);
                return ret;
            }

            ucomplex<T> operator*(double a) {
                ucomplex<T> ret(this->real() * a, this->imag() * a);
                return ret;
            }
    };

    template<class T>
    ucomplex<T> operator*(int a, ucomplex<T> z) {
        return z * a;
    }

    template<class T>
    ucomplex<T> operator*(double a, ucomplex<T> z) {
        return z * a;
    }
}
